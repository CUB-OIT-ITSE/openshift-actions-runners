name: Update Runner Images
on:
  push:
    branches:
      - main
    paths:
      - "base/*"
      - "buildah/*"
      - "dotnet/*"
      - "java/*"
      - "k8s-tools/*"
      - "node/*"
      - .github/workflows/update_images.yml
    tags:
      - v*
  workflow_dispatch:

env:
  LOGIN_REGISTRY_URL: ghcr.io
  REGISTRY_URL: ghcr.io/cub-oit-itse

  BASE_IMG_NAME: runner
  BASE_IMG_DIR: base

  BUILDAH_IMG_NAME: buildah-runner
  BUILDAH_IMG_DIR: buildah

  K8S_TOOLS_IMG_NAME: k8s-tools-runner
  K8S_TOOLS_IMG_DIR: k8s-tools

  NODE_IMG_NAME: node-runner-20
  NODE_IMG_DIR: node

  JAVA_IMG_NAME: java-runner-11
  JAVA_IMG_DIR: java

  DOTNET_IMG_NAME: dotnet-runner-6.0
  DOTNET_IMG_DIR: dotnet

  BASE_IMG_TAG: ${{ github.ref == 'refs/heads/main' && 'main' || 'latest' }}

jobs:
  update_images:
    name: Update images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: lots0logs/gh-action-get-changed-files@2.2.2
        id: get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      
      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.LOGIN_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed directories
        id: is_dir_changed
        uses: actions/github-script@v6
        with:
          script: |
            const changedFiles = ${{ steps.get_changed_files.outputs.all }};
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);

            // console.log(`payload ${JSON.stringify(context.payload)}`);
            // console.log(`eventName ${JSON.stringify(context.eventName)}`);

            const BASE = "base";
            const dirsChanged = {
              [BASE]: false,
              buildah: false,
              "k8s-tools": false,
              java: false,
              node: false,
              dotnet: false,
            };

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = changedFiles.find((changedFile) => changedFile.startsWith(dir + "/")) != null;
              dirsChanged[dir] = changed;
            });

            let rebuildAll = false;
            if (context.ref.startsWith("refs/tags/")) {
              console.log(`Tag build; all images will be rebuilt.`);
              rebuildAll = true;
            }
            else if (context.eventName === "workflow_dispatch") {
              console.log(`Workflow triggered by workflow_dispatch; all images will be rebuilt`);
              rebuildAll = true;
            }
            else if (dirsChanged[BASE]) {
              console.log("Base image changed; all images will be rebuilt.");
              rebuildAll = true;
            }

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = rebuildAll || dirsChanged[dir];

              const outputName = (dir + "_changed").toUpperCase();
              console.log(`${outputName}=${changed}`)
              core.exportVariable(outputName, changed);
            });

            // const anyChanged = Object.entries(dirsChanged).find(([k, v] => dirsChanged[k]));
            return dirsChanged;

        
      - name: Collect Tagging data for docker base image
        id: meta_base
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch
      
      - name: Build and push base image
        if: env.BASE_CHANGED == 'true'
        uses: docker/build-push-action@v5
        id: build_base_img
        with:
          platforms: linux/amd64
          tags: |
            ${{ steps.meta_base.outputs.tags }}
          context:
            ${{ env.BASE_IMG_DIR }}
          file:
            ${{ env.BASE_IMG_DIR }}/Containerfile
          push: true

      - name: Prune all untagged versions except for the last 6 for base
        if: env.BASE_CHANGED == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.BASE_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

      - name: Determine if child images should be built
        run: |
          export BUILD_BASE_OUTCOME="${{ steps.build_base_img.outcome }}"

          if [[ $BUILD_BASE_OUTCOME == "success" ]] || [[ $BUILD_BASE_OUTCOME == "skipped" ]]; then
            echo "Base image was built or did not need to be built"
            echo "Child images will be built"
            export BUILD_CHILDREN=true
          else
            export BUILD_CHILDREN=false
            echo "Base image build failed"
            echo "Child image builds will be skipped."
          fi
          echo "BUILD_CHILDREN=$BUILD_CHILDREN" >> $GITHUB_ENV

      - name: Collect Tagging data for docker buildah image
        if: |
          always() &&
          env.BUILDAH_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: meta_buildah
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.BUILDAH_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch

      - name: Build and push buildah image
        if: |
          always() &&
          env.BUILDAH_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: build_buildah
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          tags: "${{ steps.meta_buildah.outputs.tags }}"
          push: true
          context:
            ${{ env.BUILDAH_IMG_DIR }}
          file:
            ${{ env.BUILDAH_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}

      - name: Prune all untagged versions except for the last 6 for buildah
        if: |
          always() &&
          env.BUILDAH_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.BUILDAH_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

      - name: Collect Tagging data for docker k8s image
        if: |
          always() &&
          env.K8S-TOOLS_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: meta_k8s
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.K8S_TOOLS_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch

      - name: Build and push K8s tools image
        if: |
          always() &&
          env.K8S-TOOLS_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v5
        id: build_k8s
        with:
          tags: "${{ steps.meta_k8s.outputs.tags }}"
          platforms: linux/amd64
          push: true
          context:
            ${{ env.K8S_TOOLS_IMG_DIR }}
          file:
            ${{ env.K8S_TOOLS_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}

      - name: Prune all untagged versions except for the last 6 for k8s-tools
        if: |
          always() &&
          env.K8S-TOOLS_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.K8S_TOOLS_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

      - name: Collect Tagging data for docker node image
        if: |
          always() &&
          env.NODE_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: meta_node
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.NODE_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch

      - name: Build and push Node image
        if: |
          always() &&
          env.NODE_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: build_node
        uses: docker/build-push-action@v5
        with:
          tags: "${{ steps.meta_node.outputs.tags }}"
          platforms: linux/amd64
          push: true
          context:
            ${{ env.NODE_IMG_DIR }}
          file:
            ${{ env.NODE_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}

      - name: Prune all untagged versions except for the last 6 for node image
        if: |
          always() &&
          env.NODE_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.NODE_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

      - name: Collect Tagging data for docker java image
        if: |
          always() &&
          env.JAVA_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: meta_java
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.JAVA_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch

      - name: Build and push Java image
        if: |
          always() &&
          env.JAVA_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: build_java
        uses: docker/build-push-action@v5
        with:
          tags: "${{ steps.meta_java.outputs.tags }}"
          platforms: linux/amd64
          push: true
          context:
            ${{ env.JAVA_IMG_DIR }}
          file:
            ${{ env.JAVA_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}

      - name: Prune all untagged versions except for the last 6 for java image
        if: |
          always() &&
          env.JAVA_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.JAVA_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

      - name: Collect Tagging data for docker dotnet image
        if: |
          always() &&
          env.DOTNET_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: meta_dotnet
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.DOTNET_IMG_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch

      - name: Build and push dotnet image
        if: |
          always() &&
          env.DOTNET_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: build_dotnet
        uses: docker/build-push-action@v5
        with:
          tags: "${{ steps.meta_dotnet.outputs.tags }}"
          platforms: linux/amd64
          push: true
          context:
            ${{ env.DOTNET_IMG_DIR }}
          file:
            ${{ env.DOTNET_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}

      - name: Prune all untagged versions except for the last 6 for dotnet image
        if: |
          always() &&
          env.DOTNET_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.DOTNET_IMG_NAME }}
          package-type: 'container'
          min-versions-to-keep: 6
          delete-only-untagged-versions: 'true'

  scan_images:
    name: Scan Images
    needs: update_images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.LOGIN_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Security Scan Base Image
        id: scan_base
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.BASE_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for base image
        if: ${{ steps.scan_base.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_base.outputs.sarif }}
          category: base-image

      - name: Security Scan Buildah Image
        id: scan_buildah
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.BUILDAH_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.BUILDAH_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for buildah image
        if: ${{ steps.scan_buildah.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_buildah.outputs.sarif }}
          category: buildah-image

      - name: Security Scan K8S Image
        id: scan_k8s
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.K8S_TOOLS_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.K8S_TOOLS_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for k8s image
        if: ${{ steps.scan_k8s.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_k8s.outputs.sarif }}
          category: k8s-image

      - name: Security Scan Node Image
        id: scan_node
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.NODE_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.NODE_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for node image
        if: ${{ steps.scan_node.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_node.outputs.sarif }}
          category: node-image

      - name: Security Scan Java Image
        id: scan_java
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.JAVA_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.JAVA_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for java image
        if: ${{ steps.scan_java.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_java.outputs.sarif }}
          category: java-image

      - name: Security Scan dotnet Image
        id: scan_dotnet
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.DOTNET_IMG_NAME }}:${{ env.BASE_IMG_TAG }}
          dockerfile: ${{ env.DOTNET_IMG_DIR }}/Containerfile

      - name: Upload SARIF report for dotnet image
        if: ${{ steps.scan_dotnet.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_dotnet.outputs.sarif }}
          category: dotnet-image