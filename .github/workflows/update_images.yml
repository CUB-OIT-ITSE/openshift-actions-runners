name: Update Runner Images
on:
  push:
  pull_request:

env:
  REGISTRY_USER: redhat-github-actions+redhat_actions_ci_pusher
  REGISTRY_URL: quay.io/redhat-github-actions

  BASE_IMG_NAME: runner
  BASE_IMG_DIR: base

  BUILDAH_IMG_NAME: buildah-runner
  BUILDAH_IMG_DIR: buildah

  K8S_TOOLS_IMG_NAME: k8s-tools-runner
  K8S_TOOLS_IMG_DIR: k8s-tools

jobs:
  update_images:
    name: Update images
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: redhat-actions/common/commit-data@v1
        id: commit_data

      - uses: lots0logs/gh-action-get-changed-files@2.1.4
        id: get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed directories
        id: is_dir_changed
        uses: actions/github-script@v3
        with:
          script: |
            const changedFiles = ${{ steps.get_changed_files.outputs.all }};
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);

            const BASE = "base";
            const dirsChanged = {
              [BASE]: false,
              buildah: false,
              "k8s-tools": false
            };

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = changedFiles.find((changedFile) => changedFile.startsWith(dir + "/")) != null;
              dirsChanged[dir] = changed;
            });

            if (dirsChanged[BASE]) {
              console.log("Base image changed; all images will be rebuilt.");
            }

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = dirsChanged[BASE] || dirsChanged[dir];

              const outputName = dir + "_changed";
              console.log(`${outputName}=${changed}`)
              core.exportVariable(outputName, changed);
            });

            // const anyChanged = Object.entries(dirsChanged).find(([k, v] => dirsChanged[k]));
            return dirsChanged;

      - name: Determine tag
        shell: bash
        run: |
          export IMG_TAGS=latest
          export GIT_TAG="${{ steps.commit_data.outputs.tag }}"
          export BRANCH="${{ steps.commit_data.outputs.branch }}"

          if [[ -n "$GIT_TAG" ]]; then
            IMG_TAGS="$GIT_TAG"
          elif [[ -n "$BRANCH" ]]; then
            if [[ "$BRANCH" == "main" ]]; then
              IMG_TAGS="latest"
            else
              IMG_TAGS=$BRANCH
            fi
          else
            IMG_TAGS="${{ steps.commit_data.outputs.short_sha }}"
          fi

          echo "IMG_TAGS=$IMG_TAGS" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Tagging images with '$IMG_TAGS'"

      # The child image builds are done on the same machine so that it doesn't have to pull the updated base image; it's already there locally.
      - name: Determine image to build child images from
        shell: bash
        run: |
          export FIRST_TAG=$(echo "${{ env.IMG_TAGS }}" | awk '{ print $1 }')
          export BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:$FIRST_TAG
          echo "Child images will be build from '$BASE_IMG'"
          echo BASE_IMG=$BASE_IMG >> $GITHUB_ENV

      - name: Build base image
        if: env.base_changed == 'true'
        uses: redhat-actions/buildah-build@v2
        id: build_base_img
        with:
          image: ${{ env.BASE_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          oci: true
          context:
            ${{ env.BASE_IMG_DIR }}
          dockerfiles:
            ${{ env.BASE_IMG_DIR }}/Dockerfile

      - name: Push base image
        if: steps.commit_data.outputs.is_pr == 'false' && env.base_changed == 'true'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.BASE_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build buildah image
        if: env.buildah_changed == 'true'
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.BUILDAH_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          oci: true
          context:
            ${{ env.BUILDAH_IMG_DIR }}
          dockerfiles:
            ${{ env.BUILDAH_IMG_DIR }}/Dockerfile
          build-args: |
            BASE_IMG=${{ env.BASE_IMG }}

      - name: Push buildah image
        if: steps.commit_data.outputs.is_pr == 'false' && env.buildah_changed == 'true'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.BUILDAH_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build K8s tools image
        if: env.k8s-tools_changed == 'true'
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.K8S_TOOLS_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          oci: true
          context:
            ${{ env.K8S_TOOLS_IMG_DIR }}
          dockerfiles:
            ${{ env.K8S_TOOLS_IMG_DIR }}/Dockerfile
          build-args: |
            BASE_IMG=${{ env.BASE_IMG }}

      - name: Push K8s tools image
        if: steps.commit_data.outputs.is_pr == 'false' && env.k8s-tools_changed == 'true'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.K8S_TOOLS_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
